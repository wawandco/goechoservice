// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package echoservice

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

//The EchoService Error Code. <br/>
type EchoServiceErrorCode int64
const (
  EchoServiceErrorCode_ERROR_CODE_0 EchoServiceErrorCode = 0
  EchoServiceErrorCode_ERROR_CODE_1 EchoServiceErrorCode = 1
  EchoServiceErrorCode_OTHER_ERROR_REASON EchoServiceErrorCode = 2
  EchoServiceErrorCode_UNKNOWN_ERROR EchoServiceErrorCode = 3
)

func (p EchoServiceErrorCode) String() string {
  switch p {
  case EchoServiceErrorCode_ERROR_CODE_0: return "ERROR_CODE_0"
  case EchoServiceErrorCode_ERROR_CODE_1: return "ERROR_CODE_1"
  case EchoServiceErrorCode_OTHER_ERROR_REASON: return "OTHER_ERROR_REASON"
  case EchoServiceErrorCode_UNKNOWN_ERROR: return "UNKNOWN_ERROR"
  }
  return "<UNSET>"
}

func EchoServiceErrorCodeFromString(s string) (EchoServiceErrorCode, error) {
  switch s {
  case "ERROR_CODE_0": return EchoServiceErrorCode_ERROR_CODE_0, nil 
  case "ERROR_CODE_1": return EchoServiceErrorCode_ERROR_CODE_1, nil 
  case "OTHER_ERROR_REASON": return EchoServiceErrorCode_OTHER_ERROR_REASON, nil 
  case "UNKNOWN_ERROR": return EchoServiceErrorCode_UNKNOWN_ERROR, nil 
  }
  return EchoServiceErrorCode(0), fmt.Errorf("not a valid EchoServiceErrorCode string")
}


func EchoServiceErrorCodePtr(v EchoServiceErrorCode) *EchoServiceErrorCode { return &v }

func (p EchoServiceErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *EchoServiceErrorCode) UnmarshalText(text []byte) error {
q, err := EchoServiceErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *EchoServiceErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = EchoServiceErrorCode(v)
return nil
}

func (p * EchoServiceErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// The EchoService Business Exception. <br/>
// We send this back in case there is an error in actual business logic. <br/>
// This is supposed to be non-retry-able from client side.
// 
// Attributes:
//  - Errors
//  - ServiceMessage
//  - ServiceStackTrace
type TEchoServiceBusinessException struct {
  Errors map[EchoServiceErrorCode]string `thrift:"errors,1" db:"errors" json:"errors,omitempty"`
  ServiceMessage *string `thrift:"serviceMessage,2" db:"serviceMessage" json:"serviceMessage,omitempty"`
  ServiceStackTrace *string `thrift:"serviceStackTrace,3" db:"serviceStackTrace" json:"serviceStackTrace,omitempty"`
}

func NewTEchoServiceBusinessException() *TEchoServiceBusinessException {
  return &TEchoServiceBusinessException{}
}

var TEchoServiceBusinessException_Errors_DEFAULT map[EchoServiceErrorCode]string

func (p *TEchoServiceBusinessException) GetErrors() map[EchoServiceErrorCode]string {
  return p.Errors
}
var TEchoServiceBusinessException_ServiceMessage_DEFAULT string
func (p *TEchoServiceBusinessException) GetServiceMessage() string {
  if !p.IsSetServiceMessage() {
    return TEchoServiceBusinessException_ServiceMessage_DEFAULT
  }
return *p.ServiceMessage
}
var TEchoServiceBusinessException_ServiceStackTrace_DEFAULT string
func (p *TEchoServiceBusinessException) GetServiceStackTrace() string {
  if !p.IsSetServiceStackTrace() {
    return TEchoServiceBusinessException_ServiceStackTrace_DEFAULT
  }
return *p.ServiceStackTrace
}
func (p *TEchoServiceBusinessException) IsSetErrors() bool {
  return p.Errors != nil
}

func (p *TEchoServiceBusinessException) IsSetServiceMessage() bool {
  return p.ServiceMessage != nil
}

func (p *TEchoServiceBusinessException) IsSetServiceStackTrace() bool {
  return p.ServiceStackTrace != nil
}

func (p *TEchoServiceBusinessException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TEchoServiceBusinessException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[EchoServiceErrorCode]string, size)
  p.Errors =  tMap
  for i := 0; i < size; i ++ {
var _key0 EchoServiceErrorCode
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := EchoServiceErrorCode(v)
    _key0 = temp
}
var _val1 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val1 = v
}
    p.Errors[_key0] = _val1
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TEchoServiceBusinessException)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ServiceMessage = &v
}
  return nil
}

func (p *TEchoServiceBusinessException)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ServiceStackTrace = &v
}
  return nil
}

func (p *TEchoServiceBusinessException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TEchoServiceBusinessException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TEchoServiceBusinessException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetErrors() {
    if err := oprot.WriteFieldBegin(ctx, "errors", thrift.MAP, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errors: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.STRING, len(p.Errors)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Errors {
      if err := oprot.WriteI32(ctx, int32(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errors: ", p), err) }
  }
  return err
}

func (p *TEchoServiceBusinessException) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceMessage() {
    if err := oprot.WriteFieldBegin(ctx, "serviceMessage", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serviceMessage: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ServiceMessage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serviceMessage (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serviceMessage: ", p), err) }
  }
  return err
}

func (p *TEchoServiceBusinessException) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceStackTrace() {
    if err := oprot.WriteFieldBegin(ctx, "serviceStackTrace", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serviceStackTrace: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ServiceStackTrace)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serviceStackTrace (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serviceStackTrace: ", p), err) }
  }
  return err
}

func (p *TEchoServiceBusinessException) Equals(other *TEchoServiceBusinessException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Errors) != len(other.Errors) { return false }
  for k, _tgt := range p.Errors {
    _src2 := other.Errors[k]
    if _tgt != _src2 { return false }
  }
  if p.ServiceMessage != other.ServiceMessage {
    if p.ServiceMessage == nil || other.ServiceMessage == nil {
      return false
    }
    if (*p.ServiceMessage) != (*other.ServiceMessage) { return false }
  }
  if p.ServiceStackTrace != other.ServiceStackTrace {
    if p.ServiceStackTrace == nil || other.ServiceStackTrace == nil {
      return false
    }
    if (*p.ServiceStackTrace) != (*other.ServiceStackTrace) { return false }
  }
  return true
}

func (p *TEchoServiceBusinessException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TEchoServiceBusinessException(%+v)", *p)
}

func (p *TEchoServiceBusinessException) Error() string {
  return p.String()
}

func (TEchoServiceBusinessException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*TEchoServiceBusinessException)(nil)

// The EchoService Failure Exception. <br/>
// We send this back in case there is an error in communication with other services and so on. <br/>
// This is supposed to be retry-able from client side.
// 
// Attributes:
//  - Errors
//  - ServiceMessage
//  - ServiceStackTrace
type TEchoServiceFailureException struct {
  Errors map[EchoServiceErrorCode]string `thrift:"errors,1" db:"errors" json:"errors,omitempty"`
  ServiceMessage *string `thrift:"serviceMessage,2" db:"serviceMessage" json:"serviceMessage,omitempty"`
  ServiceStackTrace *string `thrift:"serviceStackTrace,3" db:"serviceStackTrace" json:"serviceStackTrace,omitempty"`
}

func NewTEchoServiceFailureException() *TEchoServiceFailureException {
  return &TEchoServiceFailureException{}
}

var TEchoServiceFailureException_Errors_DEFAULT map[EchoServiceErrorCode]string

func (p *TEchoServiceFailureException) GetErrors() map[EchoServiceErrorCode]string {
  return p.Errors
}
var TEchoServiceFailureException_ServiceMessage_DEFAULT string
func (p *TEchoServiceFailureException) GetServiceMessage() string {
  if !p.IsSetServiceMessage() {
    return TEchoServiceFailureException_ServiceMessage_DEFAULT
  }
return *p.ServiceMessage
}
var TEchoServiceFailureException_ServiceStackTrace_DEFAULT string
func (p *TEchoServiceFailureException) GetServiceStackTrace() string {
  if !p.IsSetServiceStackTrace() {
    return TEchoServiceFailureException_ServiceStackTrace_DEFAULT
  }
return *p.ServiceStackTrace
}
func (p *TEchoServiceFailureException) IsSetErrors() bool {
  return p.Errors != nil
}

func (p *TEchoServiceFailureException) IsSetServiceMessage() bool {
  return p.ServiceMessage != nil
}

func (p *TEchoServiceFailureException) IsSetServiceStackTrace() bool {
  return p.ServiceStackTrace != nil
}

func (p *TEchoServiceFailureException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TEchoServiceFailureException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[EchoServiceErrorCode]string, size)
  p.Errors =  tMap
  for i := 0; i < size; i ++ {
var _key3 EchoServiceErrorCode
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := EchoServiceErrorCode(v)
    _key3 = temp
}
var _val4 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val4 = v
}
    p.Errors[_key3] = _val4
  }
  if err := iprot.ReadMapEnd(ctx); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *TEchoServiceFailureException)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ServiceMessage = &v
}
  return nil
}

func (p *TEchoServiceFailureException)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ServiceStackTrace = &v
}
  return nil
}

func (p *TEchoServiceFailureException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TEchoServiceFailureException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TEchoServiceFailureException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetErrors() {
    if err := oprot.WriteFieldBegin(ctx, "errors", thrift.MAP, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errors: ", p), err) }
    if err := oprot.WriteMapBegin(ctx, thrift.I32, thrift.STRING, len(p.Errors)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Errors {
      if err := oprot.WriteI32(ctx, int32(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(ctx); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errors: ", p), err) }
  }
  return err
}

func (p *TEchoServiceFailureException) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceMessage() {
    if err := oprot.WriteFieldBegin(ctx, "serviceMessage", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serviceMessage: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ServiceMessage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serviceMessage (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serviceMessage: ", p), err) }
  }
  return err
}

func (p *TEchoServiceFailureException) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceStackTrace() {
    if err := oprot.WriteFieldBegin(ctx, "serviceStackTrace", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:serviceStackTrace: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ServiceStackTrace)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serviceStackTrace (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:serviceStackTrace: ", p), err) }
  }
  return err
}

func (p *TEchoServiceFailureException) Equals(other *TEchoServiceFailureException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.Errors) != len(other.Errors) { return false }
  for k, _tgt := range p.Errors {
    _src5 := other.Errors[k]
    if _tgt != _src5 { return false }
  }
  if p.ServiceMessage != other.ServiceMessage {
    if p.ServiceMessage == nil || other.ServiceMessage == nil {
      return false
    }
    if (*p.ServiceMessage) != (*other.ServiceMessage) { return false }
  }
  if p.ServiceStackTrace != other.ServiceStackTrace {
    if p.ServiceStackTrace == nil || other.ServiceStackTrace == nil {
      return false
    }
    if (*p.ServiceStackTrace) != (*other.ServiceStackTrace) { return false }
  }
  return true
}

func (p *TEchoServiceFailureException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TEchoServiceFailureException(%+v)", *p)
}

func (p *TEchoServiceFailureException) Error() string {
  return p.String()
}

func (TEchoServiceFailureException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*TEchoServiceFailureException)(nil)

// Echo service input DTO. <br/>
// 
// Attributes:
//  - Message
type TEchoServiceInputDTO struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewTEchoServiceInputDTO() *TEchoServiceInputDTO {
  return &TEchoServiceInputDTO{}
}


func (p *TEchoServiceInputDTO) GetMessage() string {
  return p.Message
}
func (p *TEchoServiceInputDTO) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TEchoServiceInputDTO)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *TEchoServiceInputDTO) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TEchoServiceInputDTO"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TEchoServiceInputDTO) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *TEchoServiceInputDTO) Equals(other *TEchoServiceInputDTO) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Message != other.Message { return false }
  return true
}

func (p *TEchoServiceInputDTO) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TEchoServiceInputDTO(%+v)", *p)
}

// Echo service output DTO.<br/>
// 
// Attributes:
//  - EchoMessage
type TEchoServiceOutputDTO struct {
  EchoMessage string `thrift:"echoMessage,1" db:"echoMessage" json:"echoMessage"`
}

func NewTEchoServiceOutputDTO() *TEchoServiceOutputDTO {
  return &TEchoServiceOutputDTO{}
}


func (p *TEchoServiceOutputDTO) GetEchoMessage() string {
  return p.EchoMessage
}
func (p *TEchoServiceOutputDTO) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TEchoServiceOutputDTO)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.EchoMessage = v
}
  return nil
}

func (p *TEchoServiceOutputDTO) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TEchoServiceOutputDTO"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TEchoServiceOutputDTO) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "echoMessage", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:echoMessage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.EchoMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.echoMessage (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:echoMessage: ", p), err) }
  return err
}

func (p *TEchoServiceOutputDTO) Equals(other *TEchoServiceOutputDTO) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.EchoMessage != other.EchoMessage { return false }
  return true
}

func (p *TEchoServiceOutputDTO) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TEchoServiceOutputDTO(%+v)", *p)
}

// Attributes:
//  - EchoMessage
type EchoEvent struct {
  EchoMessage string `thrift:"echoMessage,1" db:"echoMessage" json:"echoMessage"`
}

func NewEchoEvent() *EchoEvent {
  return &EchoEvent{}
}


func (p *EchoEvent) GetEchoMessage() string {
  return p.EchoMessage
}
func (p *EchoEvent) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EchoEvent)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.EchoMessage = v
}
  return nil
}

func (p *EchoEvent) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "EchoEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EchoEvent) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "echoMessage", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:echoMessage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.EchoMessage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.echoMessage (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:echoMessage: ", p), err) }
  return err
}

func (p *EchoEvent) Equals(other *EchoEvent) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.EchoMessage != other.EchoMessage { return false }
  return true
}

func (p *EchoEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EchoEvent(%+v)", *p)
}

type EchoService interface {  //Thrift service interface for the EchoService.

  // Sample sayMyName method.<br/>
  // It shows how to handle input and output as DTOs.
  // 
  // Parameters:
  //  - InputDTO
  Echo(ctx context.Context, inputDTO *TEchoServiceInputDTO) (_r *TEchoServiceOutputDTO, _err error)
}

//Thrift service interface for the EchoService.
type EchoServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewEchoServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *EchoServiceClient {
  return &EchoServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewEchoServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *EchoServiceClient {
  return &EchoServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewEchoServiceClient(c thrift.TClient) *EchoServiceClient {
  return &EchoServiceClient{
    c: c,
  }
}

func (p *EchoServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *EchoServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *EchoServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Sample sayMyName method.<br/>
// It shows how to handle input and output as DTOs.
// 
// Parameters:
//  - InputDTO
func (p *EchoServiceClient) Echo(ctx context.Context, inputDTO *TEchoServiceInputDTO) (_r *TEchoServiceOutputDTO, _err error) {
  var _args6 EchoServiceEchoArgs
  _args6.InputDTO = inputDTO
  var _result8 EchoServiceEchoResult
  var _meta7 thrift.ResponseMeta
  _meta7, _err = p.Client_().Call(ctx, "echo", &_args6, &_result8)
  p.SetLastResponseMeta_(_meta7)
  if _err != nil {
    return
  }
  switch {
  case _result8.BusinessException!= nil:
    return _r, _result8.BusinessException
  case _result8.FailureException!= nil:
    return _r, _result8.FailureException
  }

  if _ret9 := _result8.GetSuccess(); _ret9 != nil {
    return _ret9, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "echo failed: unknown result")
}

type EchoServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler EchoService
}

func (p *EchoServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *EchoServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *EchoServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewEchoServiceProcessor(handler EchoService) *EchoServiceProcessor {

  self10 := &EchoServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self10.processorMap["echo"] = &echoServiceProcessorEcho{handler:handler}
return self10
}

func (p *EchoServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x11 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x11.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x11

}

type echoServiceProcessorEcho struct {
  handler EchoService
}

func (p *echoServiceProcessorEcho) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := EchoServiceEchoArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "echo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := EchoServiceEchoResult{}
  var retval *TEchoServiceOutputDTO
  if retval, err2 = p.handler.Echo(ctx, args.InputDTO); err2 != nil {
    tickerCancel()
  switch v := err2.(type) {
    case *TEchoServiceBusinessException:
  result.BusinessException = v
    case *TEchoServiceFailureException:
  result.FailureException = v
    default:
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing echo: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "echo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "echo", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - InputDTO
type EchoServiceEchoArgs struct {
  InputDTO *TEchoServiceInputDTO `thrift:"inputDTO,1" db:"inputDTO" json:"inputDTO"`
}

func NewEchoServiceEchoArgs() *EchoServiceEchoArgs {
  return &EchoServiceEchoArgs{}
}

var EchoServiceEchoArgs_InputDTO_DEFAULT *TEchoServiceInputDTO
func (p *EchoServiceEchoArgs) GetInputDTO() *TEchoServiceInputDTO {
  if !p.IsSetInputDTO() {
    return EchoServiceEchoArgs_InputDTO_DEFAULT
  }
return p.InputDTO
}
func (p *EchoServiceEchoArgs) IsSetInputDTO() bool {
  return p.InputDTO != nil
}

func (p *EchoServiceEchoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EchoServiceEchoArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.InputDTO = &TEchoServiceInputDTO{}
  if err := p.InputDTO.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.InputDTO), err)
  }
  return nil
}

func (p *EchoServiceEchoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "echo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EchoServiceEchoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inputDTO", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:inputDTO: ", p), err) }
  if err := p.InputDTO.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.InputDTO), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:inputDTO: ", p), err) }
  return err
}

func (p *EchoServiceEchoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EchoServiceEchoArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - BusinessException
//  - FailureException
type EchoServiceEchoResult struct {
  Success *TEchoServiceOutputDTO `thrift:"success,0" db:"success" json:"success,omitempty"`
  BusinessException *TEchoServiceBusinessException `thrift:"businessException,1" db:"businessException" json:"businessException,omitempty"`
  FailureException *TEchoServiceFailureException `thrift:"failureException,2" db:"failureException" json:"failureException,omitempty"`
}

func NewEchoServiceEchoResult() *EchoServiceEchoResult {
  return &EchoServiceEchoResult{}
}

var EchoServiceEchoResult_Success_DEFAULT *TEchoServiceOutputDTO
func (p *EchoServiceEchoResult) GetSuccess() *TEchoServiceOutputDTO {
  if !p.IsSetSuccess() {
    return EchoServiceEchoResult_Success_DEFAULT
  }
return p.Success
}
var EchoServiceEchoResult_BusinessException_DEFAULT *TEchoServiceBusinessException
func (p *EchoServiceEchoResult) GetBusinessException() *TEchoServiceBusinessException {
  if !p.IsSetBusinessException() {
    return EchoServiceEchoResult_BusinessException_DEFAULT
  }
return p.BusinessException
}
var EchoServiceEchoResult_FailureException_DEFAULT *TEchoServiceFailureException
func (p *EchoServiceEchoResult) GetFailureException() *TEchoServiceFailureException {
  if !p.IsSetFailureException() {
    return EchoServiceEchoResult_FailureException_DEFAULT
  }
return p.FailureException
}
func (p *EchoServiceEchoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *EchoServiceEchoResult) IsSetBusinessException() bool {
  return p.BusinessException != nil
}

func (p *EchoServiceEchoResult) IsSetFailureException() bool {
  return p.FailureException != nil
}

func (p *EchoServiceEchoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EchoServiceEchoResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TEchoServiceOutputDTO{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *EchoServiceEchoResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.BusinessException = &TEchoServiceBusinessException{}
  if err := p.BusinessException.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BusinessException), err)
  }
  return nil
}

func (p *EchoServiceEchoResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.FailureException = &TEchoServiceFailureException{}
  if err := p.FailureException.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FailureException), err)
  }
  return nil
}

func (p *EchoServiceEchoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "echo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EchoServiceEchoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *EchoServiceEchoResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBusinessException() {
    if err := oprot.WriteFieldBegin(ctx, "businessException", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:businessException: ", p), err) }
    if err := p.BusinessException.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BusinessException), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:businessException: ", p), err) }
  }
  return err
}

func (p *EchoServiceEchoResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFailureException() {
    if err := oprot.WriteFieldBegin(ctx, "failureException", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:failureException: ", p), err) }
    if err := p.FailureException.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FailureException), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:failureException: ", p), err) }
  }
  return err
}

func (p *EchoServiceEchoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EchoServiceEchoResult(%+v)", *p)
}


